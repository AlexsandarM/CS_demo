//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CS_DataAccess
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class CS_Entities : DbContext
    {
        public CS_Entities()
            : base("name=CS_Entities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Brand> Brands { get; set; }
        public virtual DbSet<Category> Categories { get; set; }
        public virtual DbSet<Customer> Customers { get; set; }
        public virtual DbSet<Order_item> Order_item { get; set; }
        public virtual DbSet<Order> Orders { get; set; }
        public virtual DbSet<Product> Products { get; set; }
    
        public virtual int Creatorderitem(string ordern_id, string product_id, Nullable<int> quantity)
        {
            var ordern_idParameter = ordern_id != null ?
                new ObjectParameter("Ordern_id", ordern_id) :
                new ObjectParameter("Ordern_id", typeof(string));
    
            var product_idParameter = product_id != null ?
                new ObjectParameter("Product_id", product_id) :
                new ObjectParameter("Product_id", typeof(string));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Creatorderitem", ordern_idParameter, product_idParameter, quantityParameter);
        }
    
        public virtual ObjectResult<GetBrandList_Result> GetBrandList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetBrandList_Result>("GetBrandList");
        }
    
        public virtual ObjectResult<GetCategoryList_Result> GetCategoryList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCategoryList_Result>("GetCategoryList");
        }
    
        public virtual ObjectResult<GetProductList_Result> GetProductList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetProductList_Result>("GetProductList");
        }
    
        public virtual int Makeorderitem(Nullable<int> id, Nullable<int> order_id, Nullable<int> customer_id, Nullable<int> order_status)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var order_idParameter = order_id.HasValue ?
                new ObjectParameter("order_id", order_id) :
                new ObjectParameter("order_id", typeof(int));
    
            var customer_idParameter = customer_id.HasValue ?
                new ObjectParameter("customer_id", customer_id) :
                new ObjectParameter("customer_id", typeof(int));
    
            var order_statusParameter = order_status.HasValue ?
                new ObjectParameter("order_status", order_status) :
                new ObjectParameter("order_status", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Makeorderitem", idParameter, order_idParameter, customer_idParameter, order_statusParameter);
        }
    
        public virtual int spDeleteProduct(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spDeleteProduct", idParameter);
        }
    
        public virtual ObjectResult<spGetProductsInPriceRange_Result> spGetProductsInPriceRange(string from, string to)
        {
            var fromParameter = from != null ?
                new ObjectParameter("from", from) :
                new ObjectParameter("from", typeof(string));
    
            var toParameter = to != null ?
                new ObjectParameter("to", to) :
                new ObjectParameter("to", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetProductsInPriceRange_Result>("spGetProductsInPriceRange", fromParameter, toParameter);
        }
    
        public virtual int spInsertProduct(string name, Nullable<decimal> price, string brand_id, string category)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("price", price) :
                new ObjectParameter("price", typeof(decimal));
    
            var brand_idParameter = brand_id != null ?
                new ObjectParameter("brand_id", brand_id) :
                new ObjectParameter("brand_id", typeof(string));
    
            var categoryParameter = category != null ?
                new ObjectParameter("Category", category) :
                new ObjectParameter("Category", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spInsertProduct", nameParameter, priceParameter, brand_idParameter, categoryParameter);
        }
    
        public virtual int spUpdateProduct(Nullable<int> id, string name, Nullable<decimal> price)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("price", price) :
                new ObjectParameter("price", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUpdateProduct", idParameter, nameParameter, priceParameter);
        }
    }
}
